var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"These are the full docstrings for UlamMethod.jl.","category":"page"},{"location":"api/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [UlamMethod]\nOrder = [:function]","category":"page"},{"location":"api/#UlamMethod.P_closed-Tuple{UlamResult}","page":"API","title":"UlamMethod.P_closed","text":"P_closed(ulam_result)\n\nReturn the full transition matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/#UlamMethod.P_open-Tuple{UlamResult}","page":"API","title":"UlamMethod.P_open","text":"P_open(ulam_result)\n\nReturn ulam_result.O2O, i.e. the transition matrix without nirvana.\n\n\n\n\n\n","category":"method"},{"location":"api/#UlamMethod.bins-Tuple{UlamResult}","page":"API","title":"UlamMethod.bins","text":"bins(ulam_result)\n\nReturn the bins associated to the transition matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/#UlamMethod.bins_dis-Tuple{UlamResult}","page":"API","title":"UlamMethod.bins_dis","text":"bins_dis(ulam_result)\n\nReturn the bins that contained data but were removed when the largest strongly connected component was taken.\n\n\n\n\n\n","category":"method"},{"location":"api/#UlamMethod.membership-Union{Tuple{CRS}, Tuple{M}, Tuple{Dim}, Tuple{Matrix{<:Real}, UlamResult{Dim, M, CRS}}} where {Dim, M, CRS}","page":"API","title":"UlamMethod.membership","text":"membership(data, binner)\n\nTakes a Dim x N_points matrix of points and returns a vector memb where memb[i] = j if data[:,i] is  inside binner.bins[j] and memb[i] = nothing if data[:,i] is not inside any bin.\n\nmembership(traj, binner)\n\nCompute (membership(traj.x0, binner), membership(traj.xT, binner)).\n\nmembership(data, ulam_result)\n\nCompute membership(data, ulam_result.binner).\n\n\n\n\n\n","category":"method"},{"location":"api/#UlamMethod.points-Union{Tuple{Bins{Dim, M, CRS}}, Tuple{CRS}, Tuple{M}, Tuple{Dim}} where {Dim, M, CRS}","page":"API","title":"UlamMethod.points","text":"points(bins)\n\nReturn a vector of raw vertices for each bin. Can also be applied to a BinningAlgorithm.\n\n\n\n\n\n","category":"method"},{"location":"api/#UlamMethod.ulam_method-Union{Tuple{Dim}, Tuple{Trajectories{Dim}, BinningAlgorithm{Dim}}} where Dim","page":"API","title":"UlamMethod.ulam_method","text":"ulam_method(traj, binner; reinj_algo)\n\nRun the main Ulam's method calculation and return an UlamResult.\n\nArguments\n\ntraj: A Trajectories object, holding the short-range trajectory data.\nbinner: A BinningAlgorithm that specifies the algorithm used to partition the boundary into bins.\n\nOptional Arguments\n\nreinj_algo: A ReinjectionAlgorithm that specifies how trajectories pointing from nirvana to the interior should be reinjected. Default DataReinjection.\n\n\n\n\n\n","category":"method"},{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [UlamMethod]\nOrder = [:type]","category":"page"},{"location":"api/#UlamMethod.BinningAlgorithm","page":"API","title":"UlamMethod.BinningAlgorithm","text":"abstract type BinningAlgorithm{Dim}\n\nAn abstract type for binning algorithms of dimension Dim.\n\nImplementation\n\nEach subtype should have a fields:\n\nboundary::Boundary{Dim, CRS}`\nbins::Bins{Dim, CRS}\nidx2pos::Vector{Union{Int64, Nothing}}\n\nEach subtype should implement the following:\n\nA function membership(data::Matrix, binner) which takes a Dim x N_points matrix of points and returns a vector memb where memb[i] = j if data[:,i] is inside binner.bins[j] and memb[i] = nothing if data[:,i] is not inside any bin.\nA function membership(traj::Trajectories, binner) which returns (memb_x0, memb_xT). In many cases this will be given by (membership(traj.x0, binner), membership(traj.xT, binner)).\n\nMethods\n\npoints(binner)\n\nReturn a vector of raw vertices for each bin.\n\n\n\n\n\n","category":"type"},{"location":"api/#UlamMethod.Bins","page":"API","title":"UlamMethod.Bins","text":"struct Bins{Dim, M, CRS}\n\nA container type for bins of dimension Dim embedded in manifold M with coordinate reference system CRS.\n\nFields\n\nbins: A vector of Polytope{Dim, M, CRS} objects.\n\nMethods\n\npoints(bins)\n\nReturn a vector of raw vertices for each bin.\n\n\n\n\n\n","category":"type"},{"location":"api/#UlamMethod.Boundary","page":"API","title":"UlamMethod.Boundary","text":"struct Boundary{Dim, M, CRS}\n\nA container type for the computational domain within which Ulam's method is applied.\n\nThe boundary has dimension Dim embedded in manifold M with coordinate reference system CRS.\n\nThe boundary is partitioned according to an BinningAlgorithm.\n\nFields\n\nboundary: A Polytope defining the boundary.\n\nMethods\n\npoints(boundary)\n\nCalculate a Dim x N matrix of boundary vertices.\n\n1D Constructors\n\nBoundary(x_start, x_end)\n\nThe boundary is a continuous line segment Segment between x_start and x_end.\n\n2D Constructors\n\nBoundary(verts)\n\nThe boundary is a closed polygon Ngon with vertices verts, which should be be a vector of (x, y) coordinates or a 2 x N matrix.\n\nBoundary(xmin, xmax, ymin, ymax)\n\nA convenience constructor is also provided for the case of a rectangular boundary.\n\n≥3D Constructors\n\nBoundary(corner_min, corner_max)\n\nThe boundary is a HyperRectangle with minimum and maximum vertices corner_min, corner_max where the corners are NTuples, (x_min, y_min, z_min, ...), (x_max, y_max, z_max, ...).\n\nAutomatric Boundary Construction\n\nAutoBoundary(traj; nirvana = 0.10)\n\nConstruct a rectangular boundary in arbitrary dimensions based on the Trajectories in traj.\n\nThe boundary is placed such that a fraction nirvana of the data is in nirvana. For example, with the default  value of 0.10, roughly 10% of all of the datapoints (split between x0 and xT) will be outside the boundary with  a roughly equal amount on each side.\n\nThe shape of the boundary can be further controlled by providing nirvana as a vector of length Dim of tuples of the form (min, max) such  that a fraction min (respectively max) will be \"below\" (respectively \"above\") the boundary along each dimension. \n\nAutoBoundary2D(traj; nirvana = 0.10, tol = 0.001)\n\nConstruct a tight boundary in two dimensions based on the Trajectories in traj.\n\nThe boundary in question is formed by scaling the convex hull of the trajectory data until a fraction nirvana of  the data are bouside the boundary to within tol percent. \n\n\n\n\n\n","category":"type"},{"location":"api/#UlamMethod.DataReinjection","page":"API","title":"UlamMethod.DataReinjection","text":"struct DataReinjection\n\nReinject the data according to which bins are actually hit by transitions from the exterior to the interior. \n\nSince this is applied by default in the main Ulam's method algorithm, the associated reinject! function  for DataReinjection does nothing.\n\nConstructor\n\nDataReinjection()\n\n\n\n\n\n","category":"type"},{"location":"api/#UlamMethod.HexagonBinner","page":"API","title":"UlamMethod.HexagonBinner","text":"struct HexagonBinner{M, CRS}\n\nBin a two dimensional Polygon with a covering of regular hexagons. \n\nThe final number of bins may be slightly different than the number requested.\n\nFields\n\nboundary: A Boundary object.\nbins: A Bins object.\nidx2pos: A vector such that idx2pos[i] gives the position (in bins) of the bin initially (before removing dataless and disconnected bins) labelled i. idx2pos[i] == nothing if this bin was removed.\n\nConstructor\n\nHexagonBinner(nbins, boundary; hardclip = true)\n\n\n\n\n\n","category":"type"},{"location":"api/#UlamMethod.HyperRectangle","page":"API","title":"UlamMethod.HyperRectangle","text":"struct HyperRectangle{Dim, M, CRS}\n\nAn extention of Meshes to dimensions greater than 3.\n\nThe extension is minimal and implements no methods and does not interface with CRS.\n\nFields\n\nmin: The coordinates of the minimum of the HyperRectangle as an NTuple.\nmax: The coordinates of the maximum of the HyperRectangle as an NTuple.\nvertices: [min, max], required by Meshes.\n\nConstructor\n\nHyperRectangle(min, max)\n\n\n\n\n\n","category":"type"},{"location":"api/#UlamMethod.HyperRectangleBinner","page":"API","title":"UlamMethod.HyperRectangleBinner","text":"struct HyperRectangleBinner{Dim, M, CRS}\n\nBin Dim-dimensional (where Dim ≥ 3) dataset based on a tight covering of identical HyperRectangles.\n\nThe hyperrectangles are chosen to be as close as possible to hypercubes.\n\nThe HyperRectangleBinner does not have hard clipping functionality. However, bins with no data are  still removed in the main Ulam's method calculation.\n\nThe final number of bins may be different (larger) than the number requested.\n\nFields\n\nboundary: A Boundary object.\nbins: A Bins object.\nidx2pos: A vector such that idx2pos[i] gives the position (in bins) of the bin initially (before removing dataless and disconnected bins) labelled i. idx2pos[i] == nothing if this bin was removed.\nranges: A vector such that ranges[i] is the AbstractRange giving the gridpoints of the bins along dimension i.\n\nConstructor\n\nHyperRectangleBinner(nbins, boundary)\n\n\n\n\n\n","category":"type"},{"location":"api/#UlamMethod.LineBinner","page":"API","title":"UlamMethod.LineBinner","text":"struct LineBinner{M, CRS}\n\nBin a one dimensional Segment (line segement) with nbins equally-spaced bins.\n\nFields\n\nboundary: A Boundary object.\nbins: A Bins object.\nidx2pos: A vector such that idx2pos[i] gives the position (in bins) of the bin initially (before removing dataless and disconnected bins) labelled i. idx2pos[i] == nothing if this bin was removed.\n\nConstructor\n\nLineBinner(nbins, boundary; hardclip = true)\n\n\n\n\n\n","category":"type"},{"location":"api/#UlamMethod.RectangleBinner","page":"API","title":"UlamMethod.RectangleBinner","text":"struct RectangleBinner{M, CRS}\n\nBin a two dimensional Polygon with a tight covering of rectangles. The rectangles are chosen to be as close as possible to squares and so the final number of bins may be slightly different than the number requested.\n\nFields\n\nboundary: A Boundary object.\nbins: A Bins object.\nidx2pos: A vector such that idx2pos[i] gives the position (in bins) of the bin initially (before removing dataless and disconnected bins) labelled i. idx2pos[i] == nothing if this bin was removed.\n\nConstructor\n\nRectangleBinner(nbins, boundary; hardclip = true)\n\n\n\n\n\n","category":"type"},{"location":"api/#UlamMethod.ReinjectionAlgorithm","page":"API","title":"UlamMethod.ReinjectionAlgorithm","text":"abstract type ReinjectionAlgorithm\n\nThe abstract type for the algorithm controlling how trajectories pointing from nirvana to the interior are redistributed.\n\nEach subtype reinj_algo should implement the following:\n\na function reinject!(binner, Pij, reinj_algo) that modifies the transition matrix Pijin place given\n\nthe binning algorithm binner. This function is applied after the largest strongly connected component of the original Pij is taken, but before the matrix is row-stochasticized. \n\n\n\n\n\n","category":"type"},{"location":"api/#UlamMethod.SourceReinjection","page":"API","title":"UlamMethod.SourceReinjection","text":"struct SourceReinjection{Dim}\n\nReinject the data at particular locations. \n\nFields\n\npoints: A vector of the form [p1, p2, ...] where pi is a point such as (x) or (x, y). Data are reinjected uniformly across all bins that contain at least one member of points.\nfallback: The ReinjectionAlgorithm to apply in case no bins contain any points or there is no data to reinject.\n\nConstructor\n\nSourceReinjection(points; fallback = DataReinjection())\n\n\n\n\n\n","category":"type"},{"location":"api/#UlamMethod.Trajectories","page":"API","title":"UlamMethod.Trajectories","text":"struct Trajectories{Dim}\n\nA container for trajectory data of dimension Dim.\n\nFields\n\nx0: Initial coordinates, should be a matrix of size Dim x n_traj.\nxT: Final coordinates, should be a matrix of size Dim x n_traj.\n\nConstructors\n\nTrajectories(x0, xT)\n\nConstruct Trajectories directly from data.\n\nTrajectories(dim, n_traj; corners = nothing, mu_sigma = nothing)\n\nConstruct n_traj random Trajectories of dimension dim for testing. \n\nThe x0 will lie inside the box defined by corners = ((xmin, ymin, zmin, ...), (xmax, ymax, zmax, ...)) which  defaults to the unit box when not provided.\n\nThe xT are displaced from the x0 by normal distributions along each dimension with means and variances defined by  mu_sigma = [(mu1, sigma1), (mu2, sigma2), ...]. If not provided, default to mu = 1.0, sigma = 1.0\n\n\n\n\n\n","category":"type"},{"location":"api/#UlamMethod.TriangleBinner","page":"API","title":"UlamMethod.TriangleBinner","text":"struct TriangleBinner{M, CRS}\n\nBin a two dimensional Polygon with a covering of equilateral triangles. \n\nThe final number of bins may be slightly different than the number requested.\n\nFields\n\nboundary: A Boundary object.\nbins: A Bins object.\nidx2pos: A vector such that idx2pos[i] gives the position (in bins) of the bin initially (before removing dataless and disconnected bins) labelled i. idx2pos[i] == nothing if this bin was removed.\n\nConstructor\n\nTriangleBinner(nbins, boundary; hardclip = true)\n\n\n\n\n\n","category":"type"},{"location":"api/#UlamMethod.UlamResult","page":"API","title":"UlamMethod.UlamResult","text":"struct UlamResult{Dim, M, CRS}\n\nA container for the result of the main Ulam's method calculation. \n\nThis consists of three main components, the transition probability matrix, the associated  bins and the bins that were disconnected.\n\nThe transition probability matrix is of the form\n\n| P_O2O | P_O2ω | \n\n| P_ω2O |  0  |\n\nWhere O represents the \"open\" (interior) region and ω reprsents the \"nirvana\" (exterior) region. The union of O and ω form a closed region.\n\nFields\n\nP_O2O: As in diagram.\nP_O2ω: As in diagram.\nP_ω2O: As in diagram.\nbinner: The BinningAlgorithm used to bin the data.\nbins_dis: The bins that contained data but were removed when the largest strongly connected component was taken.\n\nMethods\n\nP_closed(UlamResult)\n\nAccess the full matrix.\n\nP_open(UlamResult)\n\nAccess P_O2O.\n\nbins(UlamResult)\n\nAccess bins.\n\nbins_dis(UlamResult)\n\nAccess bins_dis.\n\nmembership(data, ulam_result)\n\nCompute membership(data, ulam_result.binner).\n\n\n\n\n\n","category":"type"},{"location":"api/#UlamMethod.VoronoiBinner","page":"API","title":"UlamMethod.VoronoiBinner","text":"struct VoronoiBinner{Dim, M, CRS}\n\nBin Dim-dimensional (where Dim ∈ (1, 2)) dataset based on a Voronoi tesellation of points generated by a k-means clustering of initial trajectory data (i.e. Trajectories.x0).\n\nFields\n\nboundary: A Boundary object.\nbins: A Bins object.\nidx2pos: A vector such that idx2pos[i] gives the position (in bins) of the bin initially (before removing dataless and disconnected bins) labelled i. idx2pos[i] == nothing if this bin was removed.\n\nConstructor\n\nVoronoiBinner(nbins, boundary, traj; hardclip = true)\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"<!– ## Constants","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [UlamMethod]\nOrder = [:constant]","category":"page"},{"location":"api/","page":"API","title":"API","text":"–>","category":"page"},{"location":"api/#Earth-Polygons","page":"API","title":"Earth Polygons","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [UlamMethod.EarthPolygons]","category":"page"},{"location":"api/#UlamMethod.EarthPolygons.GoG_big","page":"API","title":"UlamMethod.EarthPolygons.GoG_big","text":"GoG_big\n\nVertices defining the entirety of the Gulf of Guinea.\n\n\n\n\n\n","category":"constant"},{"location":"api/#UlamMethod.EarthPolygons.GoG_small","page":"API","title":"UlamMethod.EarthPolygons.GoG_small","text":"GoG_small\n\nVertices defining the interior of the Gulf of Guinea closest to the shore.\n\n\n\n\n\n","category":"constant"},{"location":"api/#UlamMethod.EarthPolygons.North_Atlantic_box","page":"API","title":"UlamMethod.EarthPolygons.North_Atlantic_box","text":"North_Atlantic_box\n\nVertices defining a rectangle with lower left corner (-100, -9) and upper right corner (15, 39).\n\n\n\n\n\n","category":"constant"},{"location":"api/#UlamMethod.EarthPolygons.North_Atlantic_clipped","page":"API","title":"UlamMethod.EarthPolygons.North_Atlantic_clipped","text":"North_Atlantic_clipped\n\nVertices defining a polygon contained in the rectangle with lower left  corner (-100, -9) and upper right corner (15, 39). This polygon clips away the  land, leaving only the ocean in the rectangle.\n\n\n\n\n\n","category":"constant"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"advanced/#Advanced-Usage","page":"Advanced Usage","title":"Advanced Usage","text":"","category":"section"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"Pages = [\"advanced.md\"]\nDepth = 5","category":"page"},{"location":"advanced/#High-level-overview","page":"Advanced Usage","title":"High level overview","text":"","category":"section"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"Use of this package proceeds as follows.","category":"page"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"Create Trajectories using your trajectory data\nSelect the computational domain (Boundary). Data inside the boundary are considered \"interior\" and data outside the boundary are considered \"exterior\" or \"in nirvana\"[1] [2]. Use the AutoBoundary function to attempt to select a reasonable boundary automatically. In 2D, the AutoBoundary2D function is also available, which may find a tighter boundary than AutoBoundary.\nSelect a BinningAlgorithm and set any parameters it has.\nOptionally, select a ReinjectionAlgorithm to handle the behavior of trajectories points from nirvana to the interior.\nRun ulam_method(traj, binner; reinj_algo).\nInspect and process the result with P_closed, bins, membership and other functions.","category":"page"},{"location":"advanced/#Loading-trajectories","page":"Advanced Usage","title":"Loading trajectories","text":"","category":"section"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"Trajectories","category":"page"},{"location":"advanced/#UlamMethod.Trajectories-advanced","page":"Advanced Usage","title":"UlamMethod.Trajectories","text":"struct Trajectories{Dim}\n\nA container for trajectory data of dimension Dim.\n\nFields\n\nx0: Initial coordinates, should be a matrix of size Dim x n_traj.\nxT: Final coordinates, should be a matrix of size Dim x n_traj.\n\nConstructors\n\nTrajectories(x0, xT)\n\nConstruct Trajectories directly from data.\n\nTrajectories(dim, n_traj; corners = nothing, mu_sigma = nothing)\n\nConstruct n_traj random Trajectories of dimension dim for testing. \n\nThe x0 will lie inside the box defined by corners = ((xmin, ymin, zmin, ...), (xmax, ymax, zmax, ...)) which  defaults to the unit box when not provided.\n\nThe xT are displaced from the x0 by normal distributions along each dimension with means and variances defined by  mu_sigma = [(mu1, sigma1), (mu2, sigma2), ...]. If not provided, default to mu = 1.0, sigma = 1.0\n\n\n\n\n\n","category":"type"},{"location":"advanced/#Defining-Boundaries","page":"Advanced Usage","title":"Defining Boundaries","text":"","category":"section"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"Boundary","category":"page"},{"location":"advanced/#UlamMethod.Boundary-advanced","page":"Advanced Usage","title":"UlamMethod.Boundary","text":"struct Boundary{Dim, M, CRS}\n\nA container type for the computational domain within which Ulam's method is applied.\n\nThe boundary has dimension Dim embedded in manifold M with coordinate reference system CRS.\n\nThe boundary is partitioned according to an BinningAlgorithm.\n\nFields\n\nboundary: A Polytope defining the boundary.\n\nMethods\n\npoints(boundary)\n\nCalculate a Dim x N matrix of boundary vertices.\n\n1D Constructors\n\nBoundary(x_start, x_end)\n\nThe boundary is a continuous line segment Segment between x_start and x_end.\n\n2D Constructors\n\nBoundary(verts)\n\nThe boundary is a closed polygon Ngon with vertices verts, which should be be a vector of (x, y) coordinates or a 2 x N matrix.\n\nBoundary(xmin, xmax, ymin, ymax)\n\nA convenience constructor is also provided for the case of a rectangular boundary.\n\n≥3D Constructors\n\nBoundary(corner_min, corner_max)\n\nThe boundary is a HyperRectangle with minimum and maximum vertices corner_min, corner_max where the corners are NTuples, (x_min, y_min, z_min, ...), (x_max, y_max, z_max, ...).\n\nAutomatric Boundary Construction\n\nAutoBoundary(traj; nirvana = 0.10)\n\nConstruct a rectangular boundary in arbitrary dimensions based on the Trajectories in traj.\n\nThe boundary is placed such that a fraction nirvana of the data is in nirvana. For example, with the default  value of 0.10, roughly 10% of all of the datapoints (split between x0 and xT) will be outside the boundary with  a roughly equal amount on each side.\n\nThe shape of the boundary can be further controlled by providing nirvana as a vector of length Dim of tuples of the form (min, max) such  that a fraction min (respectively max) will be \"below\" (respectively \"above\") the boundary along each dimension. \n\nAutoBoundary2D(traj; nirvana = 0.10, tol = 0.001)\n\nConstruct a tight boundary in two dimensions based on the Trajectories in traj.\n\nThe boundary in question is formed by scaling the convex hull of the trajectory data until a fraction nirvana of  the data are bouside the boundary to within tol percent. \n\n\n\n\n\n","category":"type"},{"location":"advanced/#Binning-Algorithms","page":"Advanced Usage","title":"Binning Algorithms","text":"","category":"section"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"BinningAlgorithm","category":"page"},{"location":"advanced/#UlamMethod.BinningAlgorithm-advanced","page":"Advanced Usage","title":"UlamMethod.BinningAlgorithm","text":"abstract type BinningAlgorithm{Dim}\n\nAn abstract type for binning algorithms of dimension Dim.\n\nImplementation\n\nEach subtype should have a fields:\n\nboundary::Boundary{Dim, CRS}`\nbins::Bins{Dim, CRS}\nidx2pos::Vector{Union{Int64, Nothing}}\n\nEach subtype should implement the following:\n\nA function membership(data::Matrix, binner) which takes a Dim x N_points matrix of points and returns a vector memb where memb[i] = j if data[:,i] is inside binner.bins[j] and memb[i] = nothing if data[:,i] is not inside any bin.\nA function membership(traj::Trajectories, binner) which returns (memb_x0, memb_xT). In many cases this will be given by (membership(traj.x0, binner), membership(traj.xT, binner)).\n\nMethods\n\npoints(binner)\n\nReturn a vector of raw vertices for each bin.\n\n\n\n\n\n","category":"type"},{"location":"advanced/#1D-Algorithms","page":"Advanced Usage","title":"1D Algorithms","text":"","category":"section"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"LineBinner","category":"page"},{"location":"advanced/#UlamMethod.LineBinner-advanced","page":"Advanced Usage","title":"UlamMethod.LineBinner","text":"struct LineBinner{M, CRS}\n\nBin a one dimensional Segment (line segement) with nbins equally-spaced bins.\n\nFields\n\nboundary: A Boundary object.\nbins: A Bins object.\nidx2pos: A vector such that idx2pos[i] gives the position (in bins) of the bin initially (before removing dataless and disconnected bins) labelled i. idx2pos[i] == nothing if this bin was removed.\n\nConstructor\n\nLineBinner(nbins, boundary; hardclip = true)\n\n\n\n\n\n","category":"type"},{"location":"advanced/#2D-Algorithms","page":"Advanced Usage","title":"2D Algorithms","text":"","category":"section"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"RectangleBinner\nTriangleBinner\nHexagonBinner\nVoronoiBinner","category":"page"},{"location":"advanced/#UlamMethod.RectangleBinner-advanced","page":"Advanced Usage","title":"UlamMethod.RectangleBinner","text":"struct RectangleBinner{M, CRS}\n\nBin a two dimensional Polygon with a tight covering of rectangles. The rectangles are chosen to be as close as possible to squares and so the final number of bins may be slightly different than the number requested.\n\nFields\n\nboundary: A Boundary object.\nbins: A Bins object.\nidx2pos: A vector such that idx2pos[i] gives the position (in bins) of the bin initially (before removing dataless and disconnected bins) labelled i. idx2pos[i] == nothing if this bin was removed.\n\nConstructor\n\nRectangleBinner(nbins, boundary; hardclip = true)\n\n\n\n\n\n","category":"type"},{"location":"advanced/#UlamMethod.TriangleBinner-advanced","page":"Advanced Usage","title":"UlamMethod.TriangleBinner","text":"struct TriangleBinner{M, CRS}\n\nBin a two dimensional Polygon with a covering of equilateral triangles. \n\nThe final number of bins may be slightly different than the number requested.\n\nFields\n\nboundary: A Boundary object.\nbins: A Bins object.\nidx2pos: A vector such that idx2pos[i] gives the position (in bins) of the bin initially (before removing dataless and disconnected bins) labelled i. idx2pos[i] == nothing if this bin was removed.\n\nConstructor\n\nTriangleBinner(nbins, boundary; hardclip = true)\n\n\n\n\n\n","category":"type"},{"location":"advanced/#UlamMethod.HexagonBinner-advanced","page":"Advanced Usage","title":"UlamMethod.HexagonBinner","text":"struct HexagonBinner{M, CRS}\n\nBin a two dimensional Polygon with a covering of regular hexagons. \n\nThe final number of bins may be slightly different than the number requested.\n\nFields\n\nboundary: A Boundary object.\nbins: A Bins object.\nidx2pos: A vector such that idx2pos[i] gives the position (in bins) of the bin initially (before removing dataless and disconnected bins) labelled i. idx2pos[i] == nothing if this bin was removed.\n\nConstructor\n\nHexagonBinner(nbins, boundary; hardclip = true)\n\n\n\n\n\n","category":"type"},{"location":"advanced/#UlamMethod.VoronoiBinner-advanced","page":"Advanced Usage","title":"UlamMethod.VoronoiBinner","text":"struct VoronoiBinner{Dim, M, CRS}\n\nBin Dim-dimensional (where Dim ∈ (1, 2)) dataset based on a Voronoi tesellation of points generated by a k-means clustering of initial trajectory data (i.e. Trajectories.x0).\n\nFields\n\nboundary: A Boundary object.\nbins: A Bins object.\nidx2pos: A vector such that idx2pos[i] gives the position (in bins) of the bin initially (before removing dataless and disconnected bins) labelled i. idx2pos[i] == nothing if this bin was removed.\n\nConstructor\n\nVoronoiBinner(nbins, boundary, traj; hardclip = true)\n\n\n\n\n\n","category":"type"},{"location":"advanced/#3D-Algorithms","page":"Advanced Usage","title":"≥3D Algorithms","text":"","category":"section"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"HyperRectangleBinner","category":"page"},{"location":"advanced/#UlamMethod.HyperRectangleBinner-advanced","page":"Advanced Usage","title":"UlamMethod.HyperRectangleBinner","text":"struct HyperRectangleBinner{Dim, M, CRS}\n\nBin Dim-dimensional (where Dim ≥ 3) dataset based on a tight covering of identical HyperRectangles.\n\nThe hyperrectangles are chosen to be as close as possible to hypercubes.\n\nThe HyperRectangleBinner does not have hard clipping functionality. However, bins with no data are  still removed in the main Ulam's method calculation.\n\nThe final number of bins may be different (larger) than the number requested.\n\nFields\n\nboundary: A Boundary object.\nbins: A Bins object.\nidx2pos: A vector such that idx2pos[i] gives the position (in bins) of the bin initially (before removing dataless and disconnected bins) labelled i. idx2pos[i] == nothing if this bin was removed.\nranges: A vector such that ranges[i] is the AbstractRange giving the gridpoints of the bins along dimension i.\n\nConstructor\n\nHyperRectangleBinner(nbins, boundary)\n\n\n\n\n\n","category":"type"},{"location":"advanced/#Reinjection-algorithms","page":"Advanced Usage","title":"Reinjection algorithms","text":"","category":"section"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"ReinjectionAlgorithm","category":"page"},{"location":"advanced/#UlamMethod.ReinjectionAlgorithm-advanced","page":"Advanced Usage","title":"UlamMethod.ReinjectionAlgorithm","text":"abstract type ReinjectionAlgorithm\n\nThe abstract type for the algorithm controlling how trajectories pointing from nirvana to the interior are redistributed.\n\nEach subtype reinj_algo should implement the following:\n\na function reinject!(binner, Pij, reinj_algo) that modifies the transition matrix Pijin place given\n\nthe binning algorithm binner. This function is applied after the largest strongly connected component of the original Pij is taken, but before the matrix is row-stochasticized. \n\n\n\n\n\n","category":"type"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"DataReinjection\nSourceReinjection","category":"page"},{"location":"advanced/#UlamMethod.DataReinjection-advanced","page":"Advanced Usage","title":"UlamMethod.DataReinjection","text":"struct DataReinjection\n\nReinject the data according to which bins are actually hit by transitions from the exterior to the interior. \n\nSince this is applied by default in the main Ulam's method algorithm, the associated reinject! function  for DataReinjection does nothing.\n\nConstructor\n\nDataReinjection()\n\n\n\n\n\n","category":"type"},{"location":"advanced/#UlamMethod.SourceReinjection-advanced","page":"Advanced Usage","title":"UlamMethod.SourceReinjection","text":"struct SourceReinjection{Dim}\n\nReinject the data at particular locations. \n\nFields\n\npoints: A vector of the form [p1, p2, ...] where pi is a point such as (x) or (x, y). Data are reinjected uniformly across all bins that contain at least one member of points.\nfallback: The ReinjectionAlgorithm to apply in case no bins contain any points or there is no data to reinject.\n\nConstructor\n\nSourceReinjection(points; fallback = DataReinjection())\n\n\n\n\n\n","category":"type"},{"location":"advanced/#Computing-the-main-results","page":"Advanced Usage","title":"Computing the main results","text":"","category":"section"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"ulam_method","category":"page"},{"location":"advanced/#UlamMethod.ulam_method-advanced","page":"Advanced Usage","title":"UlamMethod.ulam_method","text":"ulam_method(traj, binner; reinj_algo)\n\nRun the main Ulam's method calculation and return an UlamResult.\n\nArguments\n\ntraj: A Trajectories object, holding the short-range trajectory data.\nbinner: A BinningAlgorithm that specifies the algorithm used to partition the boundary into bins.\n\nOptional Arguments\n\nreinj_algo: A ReinjectionAlgorithm that specifies how trajectories pointing from nirvana to the interior should be reinjected. Default DataReinjection.\n\n\n\n\n\n","category":"function"},{"location":"advanced/#Working-with-results","page":"Advanced Usage","title":"Working with results","text":"","category":"section"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"UlamResult\nP_closed\nbins\nbins_dis\nmembership\npoints","category":"page"},{"location":"advanced/#UlamMethod.UlamResult-advanced","page":"Advanced Usage","title":"UlamMethod.UlamResult","text":"struct UlamResult{Dim, M, CRS}\n\nA container for the result of the main Ulam's method calculation. \n\nThis consists of three main components, the transition probability matrix, the associated  bins and the bins that were disconnected.\n\nThe transition probability matrix is of the form\n\n| P_O2O | P_O2ω | \n\n| P_ω2O |  0  |\n\nWhere O represents the \"open\" (interior) region and ω reprsents the \"nirvana\" (exterior) region. The union of O and ω form a closed region.\n\nFields\n\nP_O2O: As in diagram.\nP_O2ω: As in diagram.\nP_ω2O: As in diagram.\nbinner: The BinningAlgorithm used to bin the data.\nbins_dis: The bins that contained data but were removed when the largest strongly connected component was taken.\n\nMethods\n\nP_closed(UlamResult)\n\nAccess the full matrix.\n\nP_open(UlamResult)\n\nAccess P_O2O.\n\nbins(UlamResult)\n\nAccess bins.\n\nbins_dis(UlamResult)\n\nAccess bins_dis.\n\nmembership(data, ulam_result)\n\nCompute membership(data, ulam_result.binner).\n\n\n\n\n\n","category":"type"},{"location":"advanced/#UlamMethod.P_closed-advanced","page":"Advanced Usage","title":"UlamMethod.P_closed","text":"P_closed(ulam_result)\n\nReturn the full transition matrix.\n\n\n\n\n\n","category":"function"},{"location":"advanced/#UlamMethod.bins-advanced","page":"Advanced Usage","title":"UlamMethod.bins","text":"bins(ulam_result)\n\nReturn the bins associated to the transition matrix.\n\n\n\n\n\n","category":"function"},{"location":"advanced/#UlamMethod.bins_dis-advanced","page":"Advanced Usage","title":"UlamMethod.bins_dis","text":"bins_dis(ulam_result)\n\nReturn the bins that contained data but were removed when the largest strongly connected component was taken.\n\n\n\n\n\n","category":"function"},{"location":"advanced/#UlamMethod.membership-advanced","page":"Advanced Usage","title":"UlamMethod.membership","text":"membership(data, binner)\n\nTakes a Dim x N_points matrix of points and returns a vector memb where memb[i] = j if data[:,i] is  inside binner.bins[j] and memb[i] = nothing if data[:,i] is not inside any bin.\n\nmembership(traj, binner)\n\nCompute (membership(traj.x0, binner), membership(traj.xT, binner)).\n\nmembership(data, ulam_result)\n\nCompute membership(data, ulam_result.binner).\n\n\n\n\n\n","category":"function"},{"location":"advanced/#UlamMethod.points-advanced","page":"Advanced Usage","title":"UlamMethod.points","text":"points(bins)\n\nReturn a vector of raw vertices for each bin. Can also be applied to a BinningAlgorithm.\n\n\n\n\n\n","category":"function"},{"location":"advanced/#References","page":"Advanced Usage","title":"References","text":"","category":"section"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"[1]: Miron, Philippe, et al. \"Transition paths of marine debris and the stability of the garbage patches.\" Chaos: An Interdisciplinary Journal of Nonlinear Science 31.3 (2021): 033101.","category":"page"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"[2]: In brief, nirvana is an extra state appended to an open system to close it; trajectories which point from inside the domain to the outisde of the domain transition to this nirvana state. Trajectories which point from outside the domain to the inside are transitions \"from\" nirvana - how exactly these data are reinjected is controlled by the ReinjectionAlgorithm.","category":"page"},{"location":"#UlamMethod.jl","page":"Home","title":"UlamMethod.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\"]\nDepth = 5","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is the documentation for the Julia package UlamMethod.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is an implementation of Ulam's method [1] [2] (see also Galerkin projection [3]) for the discretization of a stochastic operator using pure Julia. Given a set of one-step trajectories ","category":"page"},{"location":"","page":"Home","title":"Home","text":"mathbfx_0 1 to  mathbfx_T 1 mathbfx_0 2 to  mathbfx_T 2 dots","category":"page"},{"location":"","page":"Home","title":"Home","text":"defined in a subset of mathbbR^N, the essential goal of Ulam's method is to partition the domain into a series of non-intersecting regions and construct a transition probability matrix P on these regions.  ","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Built on the Meshes.jl computational geometry framework.\nSupports trajectory data in arbitrary dimensions.\nSupports automatic boundary construction.\nMultiple 2D algorithms for partitioning to triangles, rectangles, hexagons and adaptively sized Voronoi cells.\nMultiple stochasticization algorithms.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is in the Julia General Registry. In the Julia REPL, run the following code and follow the prompts:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"UlamMethod\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Access the functionality of the package in your code by including the following line:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using UlamMethod","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The core functionality is provided by ","category":"page"},{"location":"","page":"Home","title":"Home","text":"ulam_method(traj, binner; reinj_algo)","category":"page"},{"location":"","page":"Home","title":"Home","text":"where","category":"page"},{"location":"","page":"Home","title":"Home","text":"traj: A Trajectories object, holding the short-range trajectory data.\nbinner: A BinningAlgorithm which contains both a Boundary object that specifies the boundary of the computational domain as well as the algorithm used to partition it into bins.\nreinj_algo: A ReinjectionAlgorithm that specifies how trajectories pointing from nirvana[4] to the interior should be reinjected. Default DataReinjection.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here are 10000 random trajectories in the domain 0 10^2","category":"page"},{"location":"","page":"Home","title":"Home","text":"using UlamMethod\nimport Random; Random.seed!(1234) # reproducible randomness\n\nn_data = 10000\nx0, xT = 10*rand(2, n_data), 10*rand(2, n_data)\ntraj = Trajectories(x0, xT)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We will take our domain to be the rectangular subset 3 5 times 4 8 and generate a covering with 40 rectangles. This covering is defined inside a Boundary object, which can be quickly created in 2D using the syntax Boundary(xmin, xmax, ymin, ymax). We then call ulam_method to run the main calculation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"xmin, xmax, ymin, ymax = 3, 5, 4, 8\nboundary = Boundary(xmin, xmax, ymin, ymax)\nbinner = RectangleBinner(40, boundary)\n\nulam = ulam_method(traj, binner)","category":"page"},{"location":"","page":"Home","title":"Home","text":"P_closed(ulam) gives the full transition probability matrix.\nbins(ulam) gives the bins and points(bins(ulam)) gives their vertices.\nmembership(points, ulam) returns the bin membership of a Dim x n_points matrix points.","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"note: Note\nPlease use the following citation if you use this package in your research.@article{bonner2023improving,\ntitle={Improving the stability of temporal statistics in transition path theory with sparse data},\nauthor={Bonner, Gage and Beron-Vera, FJ and Olascoaga, MJ},\njournal={Chaos: An Interdisciplinary Journal of Nonlinear Science},\nvolume={33},\nnumber={6},\nyear={2023},\npublisher={AIP Publishing}\n}","category":"page"},{"location":"","page":"Home","title":"Home","text":"Initial development of this package was supported by the National Science Foundation.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[1]: Ulam, Stanislaw M. A collection of mathematical problems. No. 8. Interscience Publishers, 1960.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[2]: Li, Tien-Yien. \"Finite approximation for the Frobenius-Perron operator. A solution to Ulam's conjecture.\" Journal of Approximation theory 17.2 (1976): 177-186.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[3]: Reddy, Junuthula Narasimha. Introduction to the finite element method. McGraw-Hill Education, 2019.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[4]: In brief, nirvana is an extra state appended to an open system to close it; trajectories which point from inside the domain to the outisde of the domain transition to this nirvana state. Trajectories which point from outside the domain to the inside are transitions \"from\" nirvana - how exactly these data are reinjected is controlled by the ReinjectionAlgorithm.","category":"page"}]
}
